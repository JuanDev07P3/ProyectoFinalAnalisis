/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.sistemaventasapp;

import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel; 
import java.util.ArrayList;
import java.util.List;   

/**
 *
 * @author bsantiagos
 */
public class VentanaClientes extends javax.swing.JFrame {
    
private com.mycompany.sistemaventasapp.DashboardApp dashboardPadre;
private DefaultTableModel modeloTablaClientes;
private List<Cliente> listaClientes;   
private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(VentanaClientes.class.getName());

    /**
     * Creates new form VentanaClientes
     */

public VentanaClientes(com.mycompany.sistemaventasapp.DashboardApp dashboardPadre) {
    this(); 
    this.dashboardPadre = dashboardPadre;
}

private void configurarTablaClientes() {
    String[] titulosColumnas = {"ID", "Nombre", "Apellido", "Dirección", "Teléfono", "Email"};

    modeloTablaClientes = new DefaultTableModel(null, titulosColumnas) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; 
        }
    };
    tablaClientes.setModel(modeloTablaClientes);
}

private void cargarClientesInicialesDeEjemplo() {
    if (listaClientes.isEmpty()) {
        listaClientes.add(new Cliente(1, "Juan", "Perez", "Calle Falsa 123", "555-1234", "juan.perez@example.com"));
        listaClientes.add(new Cliente(2, "Maria", "Gomez", "Av. Siempre Viva 456", "555-5678", "maria.gomez@example.com"));
        listaClientes.add(new Cliente(3, "Carlos", "Ramirez", "Blvd. Los Olivos 789", "555-9012", "carlos.r@example.com"));
    }
}

private void cargarClientesEnTabla() {
    modeloTablaClientes.setRowCount(0);

    for (Cliente cliente : listaClientes) {
        Object[] fila = new Object[6];
        fila[0] = cliente.getId();
        fila[1] = cliente.getNombre();
        fila[2] = cliente.getApellido();
        fila[3] = cliente.getDireccion();
        fila[4] = cliente.getTelefono();
        fila[5] = cliente.getEmail();
        modeloTablaClientes.addRow(fila);
    }
}
    public VentanaClientes() {
    initComponents();
    setTitle("Gestión de Clientes - Sistema de Ventas");
    setLocationRelativeTo(null);
    setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    listaClientes = new ArrayList<>(); 
    configurarTablaClientes(); 
    cargarClientesInicialesDeEjemplo(); 
    cargarClientesEnTabla(); 
}   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        scrollTablaClientes = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        btnNuevoCliente = new javax.swing.JButton();
        btnEditarCliente = new javax.swing.JButton();
        btnEliminarCliente = new javax.swing.JButton();
        btnActualizarTabla = new javax.swing.JButton();
        btnVolverDashboard = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFiltroBusqueda = new javax.swing.JTextField();
        btnFiltrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel1.setText("Listado de Clientes");

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaClientes);

        scrollTablaClientes.setViewportView(jScrollPane2);

        btnNuevoCliente.setText("NUEVO CLIENTE");
        btnNuevoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoClienteActionPerformed(evt);
            }
        });

        btnEditarCliente.setText("EDITAR CLIENTE");
        btnEditarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarClienteActionPerformed(evt);
            }
        });

        btnEliminarCliente.setText("ELIMINAR CLIENTE");
        btnEliminarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarClienteActionPerformed(evt);
            }
        });

        btnActualizarTabla.setText("ACTUALIZAR TABLA");
        btnActualizarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarTablaActionPerformed(evt);
            }
        });

        btnVolverDashboard.setText("MENU PRINCIPAL");
        btnVolverDashboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverDashboardActionPerformed(evt);
            }
        });

        jLabel2.setText("Buscar:");

        btnFiltrar.setText("Filtrar");
        btnFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(115, 115, 115)
                .addComponent(btnVolverDashboard)
                .addGap(56, 56, 56))
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollTablaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtFiltroBusqueda))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnNuevoCliente)
                                .addGap(43, 43, 43)
                                .addComponent(btnEditarCliente)
                                .addGap(38, 38, 38)
                                .addComponent(btnEliminarCliente)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnActualizarTabla)
                            .addComponent(btnFiltrar))
                        .addGap(62, 62, 62)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(btnVolverDashboard))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevoCliente)
                    .addComponent(btnEditarCliente)
                    .addComponent(btnEliminarCliente)
                    .addComponent(btnActualizarTabla))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFiltroBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFiltrar))
                .addGap(25, 25, 25)
                .addComponent(scrollTablaClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVolverDashboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverDashboardActionPerformed
    if (dashboardPadre != null) {
        dashboardPadre.setVisible(true);
    }
    this.dispose();
    }//GEN-LAST:event_btnVolverDashboardActionPerformed

    private void btnNuevoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoClienteActionPerformed
     DialogoNuevoCliente dialogo = new DialogoNuevoCliente(this, true);

    dialogo.setVisible(true); 

    Cliente clienteNuevo = dialogo.getCliente();

    if (clienteNuevo != null) {
   
        listaClientes.add(clienteNuevo);

        javax.swing.JOptionPane.showMessageDialog(this, 
                "Cliente '" + clienteNuevo.getNombre() + " " + clienteNuevo.getApellido() + "' agregado exitosamente.", 
                "Cliente Agregado", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);

        cargarClientesEnTabla();
    } else {
           }
    }//GEN-LAST:event_btnNuevoClienteActionPerformed

    private void btnEditarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarClienteActionPerformed
    int filaSeleccionada = tablaClientes.getSelectedRow();

    if (filaSeleccionada == -1) {
        javax.swing.JOptionPane.showMessageDialog(this,
                "Por favor, seleccione un cliente de la tabla para editar.",
                "Cliente No Seleccionado",
                javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }

    int idClienteAEditar = (int) modeloTablaClientes.getValueAt(filaSeleccionada, 0);

    Cliente clienteOriginal = null;
    for (Cliente c : listaClientes) {
        if (c.getId() == idClienteAEditar) {
            clienteOriginal = c;
            break;
        }
    }

    if (clienteOriginal != null) {
        DialogoEditarCliente dialogoEdicion = new DialogoEditarCliente(this, true, clienteOriginal);
        dialogoEdicion.setVisible(true);

        Cliente clienteActualizado = dialogoEdicion.getClienteModificado();

        if (clienteActualizado != null) {
            int indice = listaClientes.indexOf(clienteOriginal);
            if (indice != -1) {
                listaClientes.set(indice, clienteActualizado);
                javax.swing.JOptionPane.showMessageDialog(this,
                        "Cliente '" + clienteActualizado.getNombre() + " " + clienteActualizado.getApellido() + "' actualizado exitosamente.",
                        "Cliente Actualizado",
                        javax.swing.JOptionPane.INFORMATION_MESSAGE);
                cargarClientesEnTabla();
            }
        }
    } else {
        javax.swing.JOptionPane.showMessageDialog(this,
            "No se pudo encontrar el cliente seleccionado para editar.",
            "Error Interno",
            javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnEditarClienteActionPerformed

    private void btnEliminarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarClienteActionPerformed
        int filaSeleccionada = tablaClientes.getSelectedRow();

    if (filaSeleccionada == -1) {
        javax.swing.JOptionPane.showMessageDialog(this,
                "Por favor, seleccione un cliente de la tabla para eliminar.",
                "Cliente No Seleccionado",
                javax.swing.JOptionPane.WARNING_MESSAGE);
        return;
    }

    int idClienteAEliminar = (int) modeloTablaClientes.getValueAt(filaSeleccionada, 0);
    String nombreClienteAEliminar = (String) modeloTablaClientes.getValueAt(filaSeleccionada, 1);
    String apellidoClienteAEliminar = (String) modeloTablaClientes.getValueAt(filaSeleccionada, 2);


    int confirmacion = javax.swing.JOptionPane.showConfirmDialog(this,
            "¿Está seguro de que desea eliminar al cliente: " + nombreClienteAEliminar + " " + apellidoClienteAEliminar + " (ID: " + idClienteAEliminar + ")?",
            "Confirmar Eliminación",
            javax.swing.JOptionPane.YES_NO_OPTION,
            javax.swing.JOptionPane.WARNING_MESSAGE);

    if (confirmacion == javax.swing.JOptionPane.YES_OPTION) {
        Cliente clienteAEliminar = null;
        for (Cliente c : listaClientes) {
            if (c.getId() == idClienteAEliminar) {
                clienteAEliminar = c;
                break;
            }
        }

        if (clienteAEliminar != null) {
            listaClientes.remove(clienteAEliminar);

            javax.swing.JOptionPane.showMessageDialog(this,
                    "Cliente '" + nombreClienteAEliminar + " " + apellidoClienteAEliminar + "' eliminado exitosamente.",
                    "Cliente Eliminado",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);

            cargarClientesEnTabla();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this,
                    "Error: No se pudo encontrar el cliente seleccionado en la lista.",
                    "Error de Eliminación",
                    javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnEliminarClienteActionPerformed

    private void btnFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarActionPerformed
    String textoFiltro = txtFiltroBusqueda.getText().toLowerCase();

    modeloTablaClientes.setRowCount(0);

    if (textoFiltro.isEmpty()) {
        cargarClientesEnTabla(); 
        return;
    }

    for (Cliente cliente : listaClientes) {
        boolean coincide = cliente.getNombre().toLowerCase().contains(textoFiltro) ||
                           cliente.getApellido().toLowerCase().contains(textoFiltro) ||
                           cliente.getDireccion().toLowerCase().contains(textoFiltro) ||
                           cliente.getTelefono().toLowerCase().contains(textoFiltro) ||
                           cliente.getEmail().toLowerCase().contains(textoFiltro);

        if (coincide) {
            Object[] fila = new Object[6];
            fila[0] = cliente.getId();
            fila[1] = cliente.getNombre();
            fila[2] = cliente.getApellido();
            fila[3] = cliente.getDireccion();
            fila[4] = cliente.getTelefono();
            fila[5] = cliente.getEmail();
            modeloTablaClientes.addRow(fila);
        }
    }

    if (modeloTablaClientes.getRowCount() == 0 && !textoFiltro.isEmpty()) {
         javax.swing.JOptionPane.showMessageDialog(this,
            "No se encontraron clientes que coincidan con su búsqueda.",
            "Sin Resultados",
            javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_btnFiltrarActionPerformed

    private void btnActualizarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarTablaActionPerformed
        cargarClientesEnTabla();
    }//GEN-LAST:event_btnActualizarTablaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new VentanaClientes().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarTabla;
    private javax.swing.JButton btnEditarCliente;
    private javax.swing.JButton btnEliminarCliente;
    private javax.swing.JButton btnFiltrar;
    private javax.swing.JButton btnNuevoCliente;
    private javax.swing.JButton btnVolverDashboard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane scrollTablaClientes;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTextField txtFiltroBusqueda;
    // End of variables declaration//GEN-END:variables
}
